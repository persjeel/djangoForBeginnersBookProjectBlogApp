# package to reference our active User
from django.contrib.auth import get_user_model

from django.test import TestCase
from django.urls import reverse
from .models import Post


# Create your tests here.

class BlogTests(TestCase):

    def setUp(self):
        self.user = get_user_model().objects.create_user(
            username='testuser',
            email='test@email.com',
            password='secret'
        )
        # we add a sample blog post to test
        self.post = Post.objects.create(
            title='A good title',
            body='Nice body content',
            author=self.user,
        )

    def test_string_representation(self):
        post = Post(title='A sample title')
        self.assertEqual(str(post), post.title)

    def test_get_absolute_url(self):
        self.assertEqual(self.post.get_absolute_url(), '/post/1/')

    def test_post_content(self):
        # check if post contains correct values
        self.assertEqual(f'{self.post.title}', 'A good title')
        self.assertEqual(f'{self.post.author}', 'testuser')
        self.assertEqual(f'{self.post.body}', 'Nice body content')

    def test_post_list_view(self):
        response = self.client.get(reverse('home'))
        # check if homepage returns a 200 HTTP status code
        self.assertEqual(response.status_code, 200)
        # check if homepage contains text of post
        self.assertContains(response, self.post.title)
        # check if homepage uses correct template
        self.assertTemplateUsed(response, 'home.html')

    def test_post_detail_view(self):
        response = self.client.get('/post/1/')
        no_response = self.client.get('/post/999999/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(no_response.status_code, 404)
        self.assertContains(response, 'A good title')
        self.assertContains(response, 'Nice body content')
        self.assertTemplateUsed(response, 'post_detail.html')

    def test_post_create_view(self):
        # post() method allows to simulate making HTTP POST request to the URL associated with the `post_new` view.
        # reverse() utility func allowed to make a request to the view without hard-coding the URL
        # So URL, associated with 'post_new', was generated by reverse() func and sent as 1st parameter to the post().
        # Second parameter is the dictionary which represents the data that is being sent in the POST request.
        #  The keys correspond to the names of the form fields expected by the `post_new` view
        create_url = reverse('post_new')
        response = self.client.post(create_url, {
            'title': 'New title',
            'body': 'New text',
            'author': self.user,
        })
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'New title')
        self.assertContains(response, 'New text')

    def test_post_update_view(self):
        update_url = reverse('post_edit', args=[self.post.id])
        response = self.client.post(update_url,
                                    {'title': 'New title',
                                     'body': 'New text'})
        # 302 status code is used for temporary redirects, while a 200 status code is used for successful requests
        # that return the requested content.
        self.assertEqual(response.status_code, 302)

    def test_post_delete_view(self):
        delete_url = reverse('post_delete', args=[self.post.id])
        response = self.client.post(delete_url)
        self.assertEqual(response.status_code, 302)


